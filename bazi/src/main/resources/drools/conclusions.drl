package ru.neoflex.emf.bazi

import ru.neoflex.emf.bazi.natalChart.NatalChart
import ru.neoflex.emf.bazi.natalChart.InputParams
import ru.neoflex.emf.bazi.calendar.Calendar
import ru.neoflex.emf.bazi.calendar.Year
import ru.neoflex.emf.bazi.calendar.CalendarFactory
import ru.neoflex.emf.bazi.calendar.BaZiDate
import ru.neoflex.emf.bazi.natalChart.NatalChartFactory
import ru.neoflex.emf.bazi.natalChart.Pillar
import ru.neoflex.emf.bazi.natalChart.Zoo
import ru.neoflex.emf.bazi.natalChart.Elements
import java.util.Arrays
import java.util.List
import ru.neoflex.emf.restserver.DBServerSvc
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.ObjectWriter
import ru.neoflex.emf.bazi.natalChart.God
import ru.neoflex.emf.bazi.natalChart.Conclusions
import ru.neoflex.emf.bazi.natalChart.Result
import org.eclipse.emf.common.util.EList
import ru.neoflex.emf.bazi.natalChart.HiddenPillar
import java.util.Objects

function NatalChart addPersonalityElement(NatalChart natalChart, Conclusions conclusions) {
    Pillar day = natalChart.getDay();
    Elements skyDay = day.getSky();
    List<Elements> elements = Arrays.asList(Elements.values());
    Integer skyDayIndex = elements.indexOf(skyDay);

    String code =  "1" + "-" + skyDayIndex.toString();
    String code6 =  "6" + "-" + skyDayIndex.toString();

    Result result = NatalChartFactory.eINSTANCE.createResult();
    for (Result res : conclusions.getResults()) {
        if (res.getCode().equals(code)) {
            result.setCode(code);
            result.setTitle(res.getTitle());
            result.setDescription(res.getDescription());
            natalChart.getConclusions().getResults().add(result);
        }
        if (res.getCode().equals(code6)) {
            result.setCode(code6);
            result.setTitle(res.getTitle());
            result.setDescription(res.getDescription());
            natalChart.getConclusions().getResults().add(result);
        }
    }

    return natalChart;
}

function NatalChart addTalents(NatalChart natalChart, Conclusions conclusions) {
    Pillar month = natalChart.getMonth();
    God monthGod = month.getGod();
    List<God> gods = Arrays.asList(God.values());
    Integer monthGodIndex = gods.indexOf(monthGod);

    String code =  "2" + "-" + monthGodIndex.toString();

    Result result = NatalChartFactory.eINSTANCE.createResult();
    for (Result res : conclusions.getResults()) {
        if (res.getCode().equals(code)) {
            result.setCode(code);
            result.setTitle(res.getTitle());
            result.setDescription(res.getDescription());
            natalChart.getConclusions().getResults().add(result);
        }
    }

    return natalChart;
}

function NatalChart addHiddenTalents(NatalChart natalChart, Conclusions conclusions) {
    Pillar month = natalChart.getMonth();
    List<God> gods = Arrays.asList(God.values());
    God monthGod = month.getGod();
    Integer monthGodIndex = gods.indexOf(monthGod);

    if (month.getHiddenPillar().size() != 0) {
        for (HiddenPillar hiddenPillar : month.getHiddenPillar()) {
            God monthGodHidden = hiddenPillar.getGod();
            Integer monthGodIndexHidden = gods.indexOf(monthGodHidden);

            if(!Objects.equals(monthGodIndex,monthGodIndexHidden)) {
                String code =  "3" + "-" + monthGodIndexHidden.toString();

                Result result = NatalChartFactory.eINSTANCE.createResult();

                for (Result res : conclusions.getResults()) {
                    if (res.getCode().equals(code)) {
                        result.setCode(code);
                        result.setTitle(res.getTitle());
                        result.setDescription(res.getDescription());
                        natalChart.getConclusions().getResults().add(result);
                    }
                }
            }
        }
    }

    return natalChart;
}

rule "Create All Conclusions"
when
    $natalChart: NatalChart(day != null)
    not Conclusions()
then
    Conclusions conclusions = NatalChartFactory.eINSTANCE.createConclusions();
    conclusions.setAllDone(false);
    insert(conclusions);
end;

rule "Set Conclusion in NatalChart"
no-loop true
when
    $natalChart: NatalChart(day != null)
then
    Conclusions conclusions = NatalChartFactory.eINSTANCE.createConclusions();
    $natalChart.setConclusions(conclusions);
    update($natalChart);
end;

rule "Set Personality Element in NatalChart"
no-loop true
when
    $natalChart: NatalChart(day != null)
    $conclusions: Conclusions(results != null, allDone == true)
then
    addPersonalityElement($natalChart, $conclusions);
    update($natalChart);
end;

rule "Set Talents in NatalChart"
no-loop true
when
    $natalChart: NatalChart(day != null)
    $conclusions: Conclusions(results != null, allDone == true)
then
    addTalents($natalChart, $conclusions);
    update($natalChart);
end;

rule "Set Hidden Talents in NatalChart"
no-loop true
when
    $natalChart: NatalChart(day != null)
    $conclusions: Conclusions(results != null, allDone == true)
then
    addHiddenTalents($natalChart, $conclusions);
    update($natalChart);
end;