package ru.neoflex.emf.bazi

import ru.neoflex.emf.bazi.natalChart.NatalChartFactory
import ru.neoflex.emf.bazi.natalChart.NatalChart
import ru.neoflex.emf.bazi.natalChart.InputParams
import ru.neoflex.emf.bazi.calendar.Calendar
import ru.neoflex.emf.bazi.calendar.CalendarFactory
import ru.neoflex.emf.bazi.calendar.CalendarPackage
import ru.neoflex.emf.bazi.calendar.BaZiDate
import ru.neoflex.emf.restserver.DBServerSvc
import ru.neoflex.emf.base.HbTransaction
import java.util.stream.Collectors
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import ru.neoflex.emf.bazi.calendar.Year
import ru.neoflex.emf.bazi.natalChart.Pillar
import ru.neoflex.emf.bazi.natalChart.God
import ru.neoflex.emf.bazi.natalChart.Elements
import ru.neoflex.emf.bazi.calendar.impl.YearImpl
import java.util.Arrays
import ru.neoflex.emf.bazi.calendar.Month
import ru.neoflex.emf.bazi.calendar.Months
import ru.neoflex.emf.bazi.calendar.Day
import ru.neoflex.emf.bazi.calendar.Hour
import ru.neoflex.emf.bazi.natalChart.Zoo
import org.joda.time.Days
import java.util.Date
import java.text.SimpleDateFormat
import org.joda.time.format.DateTimeFormatter
import org.joda.time.format.DateTimeFormat
import org.joda.time.DateTime
import java.text.DateFormat
import java.util.ArrayList

import ru.neoflex.emf.timezonedb.TimezoneDBSvc
import ru.neoflex.emf.timezonedb.TimeShift
import ru.neoflex.emf.bazi.natalChart.HiddenPillar

dialect  "mvel"

global DBServerSvc dbServerSvc;
global TimezoneDBSvc timezoneDBSvc;
global HbTransaction tx;

query "EObjects"
    $eObject : EObject()
end


function Date timeShiftStart(String year, String month, String day, String hour, String minutes, String placeOfBirth, TimezoneDBSvc timezoneDBSvc) {

    DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    Date dayStart = formatter.parse(year + "-" + month + "-" + day + " " + hour + ":" + minutes + ":00");

    List <ru.neoflex.emf.timezonedb.TimeShift> timeShifts = timezoneDBSvc.timeShift(dayStart, placeOfBirth, "Asia/Shanghai");

    return formatter.parse(timeShifts.get(1).getLocalDT());
}

function Pillar createYearPillar(BaZiDate baZiDate) {
    Pillar pillar = NatalChartFactory.eINSTANCE.createPillar();

    List<Elements> elements = Arrays.asList(Elements.values());
    Integer skyIndex = baZiDate.getChineseYear() % 10 < 4 ? baZiDate.getChineseYear() % 10 + 7 : baZiDate.getChineseYear() % 10 - 3;
    Elements sky = elements.get(skyIndex);

    List<Zoo> zoo = Arrays.asList(Zoo.values());
    Integer earthIndex = baZiDate.getChineseYear() % 12 < 4 ? baZiDate.getChineseYear() % 12 + 9 : baZiDate.getChineseYear() % 12 - 3;
    Zoo earth = zoo.get(earthIndex);

    pillar.setSky(sky);
    pillar.setEarth(earth);
    return pillar;
}

function Pillar createMonthPillar(BaZiDate baZiDate) {
    Pillar pillar = NatalChartFactory.eINSTANCE.createPillar();

    List<Elements> elements = Arrays.asList(Elements.values());
    Integer countMonth = (baZiDate.getChineseYear() - 1) * 12 + baZiDate.getChineseMonth();
    Integer skyIndex = countMonth % 10 < 5 ? countMonth % 10 + 6 : countMonth % 10 - 4;
    Elements sky = elements.get(skyIndex);

    List<Zoo> zoo = Arrays.asList(Zoo.values());
    Integer earthIndex = baZiDate.getChineseMonth() % 12 < 11 ? baZiDate.getChineseMonth() % 12 + 2 : baZiDate.getChineseMonth() % 12 - 10;
    Zoo earth = zoo.get(earthIndex);

    pillar.setSky(sky);
    pillar.setEarth(earth);
    return pillar;
}

function Pillar createDayPillar(BaZiDate baZiDate) {
    Pillar pillar = NatalChartFactory.eINSTANCE.createPillar();

    Integer hour = baZiDate.getHour();
    Integer daysBetween = baZiDate.getDaysBetween();

    Integer correctionByTheHour = hour >= 23 && hour < 0 ? 1 : 0;

    List<Elements> elements = Arrays.asList(Elements.values());
    Integer skyIndex = daysBetween % 10 < 7 ? daysBetween % 10 + 4 : daysBetween % 10 - 6;
    Integer skyIndexCorrection = skyIndex + correctionByTheHour > 10 ? 1 : skyIndex + correctionByTheHour;
    Elements sky = elements.get(skyIndexCorrection);

    List<Zoo> zoo = Arrays.asList(Zoo.values());
    Integer earthIndex = daysBetween % 12 < 11 ? daysBetween % 12 + 2 : daysBetween % 12 - 10;
    Integer earthIndexCorrection = earthIndex + correctionByTheHour > 12 ? 1 : earthIndex + correctionByTheHour;
    Zoo earth = zoo.get(earthIndexCorrection);

    pillar.setSky(sky);
    pillar.setEarth(earth);
    return pillar;
}

function Integer daysBetween(Date d1, Date d2){
             return (int)( (d2.getTime() - d1.getTime()) / (1000 * 60 * 60 * 24));
}

function Pillar createHourPillarEarth(InputParams inputParams) {
    Pillar pillar = NatalChartFactory.eINSTANCE.createPillar();

    Float hour = (float)(inputParams.getHour()) / 2;

    List<Zoo> zoo = Arrays.asList(Zoo.values());
    Integer earthIndex = inputParams.getHour() == 23 ? 1 : Math.round(hour) + 1;
    Zoo earth = zoo.get(earthIndex);

    pillar.setEarth(earth);
    return pillar;
}

function Pillar createHourPillarSky(Pillar pillar, BaZiDate baZiDate, NatalChart natalChart) {
    Zoo earth = pillar.getEarth();
    List<Zoo> zoo = Arrays.asList(Zoo.values());
    Integer earthIndex = zoo.indexOf(earth);

    List<Elements> elements = Arrays.asList(Elements.values());
    Elements skyDay = natalChart.getDay().getSky();
    Integer skyDayIndex = elements.indexOf(skyDay);

    Integer skyIndex = skyDayIndex == 1 || skyDayIndex == 6
                       ?
                       earthIndex > 10 ? earthIndex - 10 : earthIndex
                       :
                           skyDayIndex == 2 || skyDayIndex == 7
                           ?
                           earthIndex + 2 > 10 ? earthIndex + 2 - 10 : earthIndex + 2
                           :
                               skyDayIndex == 3 || skyDayIndex == 8
                               ?
                               earthIndex + 4 > 10 ? earthIndex + 4 - 10 : earthIndex + 4
                               :
                                    skyDayIndex == 4 || skyDayIndex == 9
                                    ?
                                    earthIndex + 6 > 10 ? earthIndex + 6 - 10 : earthIndex + 6
                                    :
                                        earthIndex + 8 > 10 ? earthIndex + 8 - 10 : earthIndex + 8;
    Elements sky = elements.get(skyIndex);

    pillar.setSky(sky);
    return pillar;
}

function Pillar setHiddenPillar(Pillar pillar) {

    List<Zoo> zoo = Arrays.asList(Zoo.values());
    Zoo earthPillar = pillar.getEarth();
    Integer earthPillarIndex = zoo.indexOf(earthPillar);

    int [] hiddenPillarIndex = earthPillarIndex == 1 ? new int[]{10}
                 :
                         earthPillarIndex == 2 ? new int[]{6,8,10}
                         :
                             earthPillarIndex == 3 ? new int[]{1,3,5}
                             :
                                 earthPillarIndex == 4 ? new int[]{2}
                                 :
                                      earthPillarIndex == 5 ? new int[]{5,2,10}
                                      :
                                          earthPillarIndex == 6 ? new int[]{3,7,5}
                                          :
                                              earthPillarIndex == 7 ? new int[]{4,6}
                                              :
                                                      earthPillarIndex == 8 ? new int[]{6,2,4}
                                                      :
                                                          earthPillarIndex == 9 ? new int[]{7,9,5}
                                                          :
                                                              earthPillarIndex == 10 ? new int[]{8}
                                                              :
                                                                    earthPillarIndex == 11 ? new int[]{5,4,8}
                                                                    :
                                                                        new int[]{9,1};

          List<Elements> elements = Arrays.asList(Elements.values());

          for(int i = 0; i < hiddenPillarIndex.length; i++) {
                HiddenPillar hiddenPillar = NatalChartFactory.eINSTANCE.createHiddenPillar();
                hiddenPillar.setSky(elements.get(hiddenPillarIndex[i]));
                pillar.getHiddenPillar().add(hiddenPillar);

          }
    return pillar;
}



rule "Create NatalChart"
when
    $inputParams: InputParams()
    not NatalChart(inputParams == $inputParams)
then
    NatalChart natalChart = NatalChartFactory.eINSTANCE.createNatalChart();
    natalChart.setInputParams($inputParams);
    insert(natalChart);
end;

//rule "Create BaZiDate TWO_HOURS"
//when
//    $inputParams: InputParams(hourNotKnown == true, $inputDay: day, $inputMonth: month, $inputYear: year)
//    not BaZiDate(gregorianYear == null)
//then
//    BaZiDate baZiDate = CalendarFactory.eINSTANCE.createBaZiDate();
//    baZiDate.setGregorianYear($inputYear);
//    baZiDate.setGregorianMonth($inputMonth);
//    baZiDate.setDay($inputDay);
//    baZiDate.setHour(0);
//    baZiDate.setMinutes(0);
//    insert(baZiDate);
//end;

rule "Create BaZiDate LOCAL_SOLAR_TIME"
when
    $inputParams: InputParams(hourNotKnown == false, $inputYear: year, $inputMonth: month, $inputDay: day, $inputHour: hour, $placeOfBirth: placeOfBirth, $inputMinutes: minutes)
    not BaZiDate()
then
    Date newDay = timeShiftStart($inputYear.toString(), $inputMonth.toString(), $inputDay.toString(), $inputHour.toString(), $inputMinutes.toString(), $placeOfBirth, timezoneDBSvc);

    java.util.Calendar cal = java.util.Calendar.getInstance();
    cal.setTime(newDay);

    BaZiDate baZiDate = CalendarFactory.eINSTANCE.createBaZiDate();
    baZiDate.setGregorianYear(cal.get(java.util.Calendar.YEAR));
    baZiDate.setGregorianMonth(cal.get(java.util.Calendar.MONTH) + 1);
    baZiDate.setDay(cal.get(java.util.Calendar.DAY_OF_MONTH));
    baZiDate.setHour(cal.get(java.util.Calendar.HOUR_OF_DAY));
    baZiDate.setMinutes(cal.get(java.util.Calendar.MINUTE));

    String year = baZiDate.getGregorianYear() > 999 ? "" + baZiDate.getGregorianYear() : "0" + baZiDate.getGregorianYear();
    String month = baZiDate.getGregorianMonth() > 9 ? "" + baZiDate.getGregorianMonth() : "0" + baZiDate.getGregorianMonth();
    String day = baZiDate.getDay() > 9 ? "" + baZiDate.getDay() : "0" + baZiDate.getDay();
    String hour = baZiDate.getHour() > 9 ? "" + baZiDate.getHour() : "0" + baZiDate.getHour();
    String minutes = baZiDate.getMinutes() > 9 ? "" + baZiDate.getMinutes() : "0" + baZiDate.getMinutes() ;

    String fullDate = year + month + day + hour + minutes;

    baZiDate.setIntFullDate(Long.parseLong(fullDate));

    insert(baZiDate);
end;

rule "Set Year Pillar"
no-loop true
when
    $natalChart: NatalChart()
    $baZiDate: BaZiDate(chineseYear != null)
then
    Pillar year = createYearPillar($baZiDate);
    Pillar yearWithHidden = setHiddenPillar(year);
    $natalChart.setYear(yearWithHidden);
    update($natalChart);
end;

rule "Set Month Pillar"
no-loop true
when
    $natalChart: NatalChart()
    $baZiDate: BaZiDate(chineseYear != null)
then
    Pillar month = createMonthPillar($baZiDate);
    Pillar monthWithHidden = setHiddenPillar(month);
    $natalChart.setMonth(monthWithHidden);
    update($natalChart);
end;

rule "Set daysBetween in BaZiDate"
no-loop true
when
    $baZiDate: BaZiDate()
    $inputParams: InputParams($inputDay: day, $inputMonth: month, $inputYear: year, $inputHour: hour, $inputMinutes: minutes)
then
    DateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");
    Date dayStart = formatter.parse("01.01.0001");
    Date dayEnd = formatter.parse($inputDay.toString() + "." + $inputMonth.toString() + "." + $inputYear.toString());
    Integer days = daysBetween(dayStart, dayEnd);
    $baZiDate.setDaysBetween(days);
    update($baZiDate);
end;

rule "Set Day Pillar"
no-loop true
when
    $natalChart: NatalChart(month != null)
    $inputParams: InputParams()
    $baZiDate: BaZiDate(daysBetween != null, chineseYear != null, hour != null)
then
    Pillar day = createDayPillar($baZiDate);
    Pillar dayWithHidden = setHiddenPillar(day);
    $natalChart.setDay(dayWithHidden);
    update($natalChart);
end;

rule "Set Hour Pillar"
no-loop true
when
    $natalChart: NatalChart(day != null)
    $baZiDate: BaZiDate(hour != null)
then
    Pillar hour = createHourPillarEarth($natalChart.getInputParams());
    $natalChart.setHour(hour);

    createHourPillarSky($natalChart.getHour(), $baZiDate, $natalChart);
    setHiddenPillar($natalChart.getHour());

    update($natalChart);
end;
